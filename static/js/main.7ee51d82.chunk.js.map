{"version":3,"sources":["App.js","sample_instrument.csd","reportWebVitals.js","index.js"],"names":["loadResources","csound","filesArray","dirToSave","a","i","length","fileUrl","serverUrl","process","fetch","f","fName","substring","lastIndexOf","path","arrayBuffer","buffer","fs","writeFileSync","Uint8Array","App","useState","setCsound","started","setStarted","useEffect","Csound","then","cs","startCsound","setOption","resources","compileCsdText","start","getAudioContext","ctx","resume","className","style","width","href","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAMeA,E,kFAAf,WAA6BC,EAAQC,EAAYC,GAAjD,2BAAAC,EAAA,sDACaC,EAAI,EADjB,YACoBA,EAAIH,EAAWI,QADnC,wBAEcC,EAAUL,EAAWG,GACrBG,EAHd,UAG6BC,IAH7B,YAGuDF,GAHvD,SAKwBG,MAAMF,GAL9B,cAKcG,EALd,OAMcC,EAAQL,EAAQM,UAAUN,EAAQO,YAAY,KAAO,GAErDC,EARd,UAQwBH,GARxB,UAS6BD,EAAEK,cAT/B,QAScC,EATd,OAYQhB,EAAOiB,GAAGC,cAAcJ,EAAM,IAAIK,WAAWH,IAZrD,QAC2CZ,IAD3C,iDAcW,GAdX,6C,sBA4EegB,MA3Df,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACJrB,EADI,KACIsB,EADJ,OAEmBD,oBAAS,GAF5B,mBAEJE,EAFI,KAEKC,EAFL,KAGXC,qBAAU,WACQ,MAAVzB,GACA0B,cAASC,MAAK,SAAAC,GACVN,EAAUM,QAGnB,CAAC5B,IAEJ,IAAM6B,EAAW,uCAAG,4BAAA1B,EAAA,sEACVH,EAAO8B,UAAU,qBADP,cAGVC,EAAY,CACd,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,mDAfY,SAkBVhC,EAAcC,EAAQ+B,EAAW,8BAlBvB,OAoBhB/B,EAAOgC,eCtDA,0hKDuDPhC,EAAOiC,QACPjC,EAAOkC,kBAAkBP,MAAK,SAAAQ,GAAG,OAAIA,EAAIC,YACzCZ,GAAW,GAvBK,2CAAH,qDAyBjB,OACI,qBAAKa,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,iEACA,sBAAKC,MAAO,CAACC,MAAO,SAApB,UACA,uJAC4C,mBAAGC,KAAK,6DAAR,sBAD5C,oBAC8I,mBAAGA,KAAK,gEAAR,oBAD9I,OAGCxC,EACGuB,EACI,6CAEA,wBAAQkB,QAASZ,EAAjB,2BAGJ,sDE9DLa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7ee51d82.chunk.js","sourcesContent":["/* eslint-disable import/no-webpack-loader-syntax */\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport csd from \"!raw-loader!!./sample_instrument.csd\";\nimport { Csound } from \"@csound/browser\";\n\nasync function loadResources(csound, filesArray, dirToSave) {\n    for (let i = 0; i < filesArray.length; i++) {\n        const fileUrl = filesArray[i];\n        const serverUrl = `${process.env.PUBLIC_URL}/${fileUrl}`;\n        //   console.log(serverUrl);\n        const f = await fetch(serverUrl);\n        const fName = fileUrl.substring(fileUrl.lastIndexOf(\"/\") + 1);\n        // const path = `/${dirToSave}/${fName}`;\n        const path = `${fName}`;\n        const buffer = await f.arrayBuffer();\n\n        // console.log(path, buffer);\n        csound.fs.writeFileSync(path, new Uint8Array(buffer));\n    }\n    return true;\n}\n\nfunction App() {\n    const [csound, setCsound] = useState(null);\n    const [started, setStarted] = useState(false);\n    useEffect(() => {\n        if (csound == null) {\n            Csound().then(cs => {\n                setCsound(cs);\n            });\t            \n        }\n    }, [csound]);\n\n    const startCsound = async () => {\n        await csound.setOption(\"-+msg_color=false\");\n\n        const resources = [\n            \"SynthStrings1-WAV-20160913/SynthStrings1-30.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-36.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-42.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-48.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-54.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-60.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-66.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-72.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-78.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-84.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-90.wav\",\n            \"SynthStrings1-WAV-20160913/SynthStrings1-96.wav\",\n        ];\n\n        await loadResources(csound, resources, \"SynthStrings1-WAV-20160913\");\n\n        csound.compileCsdText(csd);\n        csound.start();\n        csound.getAudioContext().then(ctx => ctx.resume());\n        setStarted(true);\n    };\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Webaudio Csound Samples Example</h1>\n                <div style={{width: \"720px\"}}>\n                <p>Example that loads audio samples from server and runs with Webaudio Csound. \n                  Uses \"Synth Strings #1\" sample files from <a href=\"http://freepats.zenvoid.org/Synthesizer/synth-strings.html\">FreePats</a>. View source on <a href=\"https://github.com/kunstmusik/webaudio-csound-samples-example\">Github</a>.\n                </p>\n                {csound ? (\n                    started ? (\n                        <div>Running...</div>\n                    ) : (\n                        <button onClick={startCsound}>Start Project</button>\n                    )\n                ) : (\n                    <div>Loading...</div>\n                )}\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","export default \"Author: Steven Yi\\n\\nExample of a multi-sample sampler instrument. This example loads in sound files into f-tables \\nwith numbers 1-12.  (These are loaded in the score.)  Loop point data, taken from the sample set's \\nreadme.txt, are stored here in a global i-type array. fillarray is used to create the array with \\nfilled in values. \\n\\nThe sample set had samples labelled with MIDI note numbers (i.e., 60 is middle-c on the piano keyboard). \\nThe sample set recorded samples every 6 MIDI note numbers, and each note number maps to a scale degree. \\nWith 12 being an octave, you can see that the sample set has two samples recorded per octave. \\n\\nFor this example, lposcil is used to play the f-table and loops at the given start and end loop points. \\nThe SamplePlayer instrument takes in a MIDI note number to play (p4) and an amplitude in decibels (p5). \\nThe MIDI note number is then used to figure out what f-table to play and used to lookup the start and \\nend loop points from the giloop_points[] array.  \\n\\nNote: Any text, like the above, will be ignore by Csound when it is placed\\noutside of the CsoundSynthesizer tags.\\n\\n\\n<CsoundSynthesizer>\\n<CsOptions>\\n</CsOptions>\\n<CsInstruments>\\n\\nsr = 44100\\nksmps = 64 \\n0dbfs = 1\\nnchnls = 2\\n\\n;; Mixing signals\\nga1 init 0\\nga2 init 0\\n\\n\\n;; The following array of i-vals contains the start and end looping points given in the\\n;; SynthStrings1-WAV-20160913/readme.txt. \\n;; This variable starts with a g- to denote it is a global value, the second letter i denotes\\n;; it is of i-type, and the [] at the end denotes it is an array. \\ngiloop_points[] = fillarray(304, 620744, 239, 218136, 147, 387489, 118, 218916,\\n                           75, 216802, 35, 354941, 20, 250855, 40, 177603, \\n                           20, 125022, 22, 75130, 46, 182387, 30, 125918)\\n\\n;; Looping Table player\\n;; Load in an f-table with GEN01 and specify which channel to load to \\n;; ensure the generated table is mono\\ninstr SamplePlayer\\n  ifreq = cpsmidinn(p4)\\n  iamp = ampdbfs(p5)\\n  itab_index = int((p4 - 30)  / 6)\\n  itable = itab_index + 1  ;; calculate the f-table number\\n  ibase_freq = cpsmidinn( p4 - (p4 % 6) )  ;; calculate the base frequency for the audio file \\n                                           ;; the name of the file has a MIDI note number\\n  iloop_start_sample = giloop_points[itab_index * 2] \\n  iloop_end_sample = giloop_points[itab_index * 2 + 1]\\n\\n  ipan = 0.5  ;; hardcode to center\\n\\n  ispeed = ifreq / ibase_freq\\n\\n  ;; https://csound.com/docs/manual/lposcil.html\\n  asig = lposcil:a(iamp, ispeed, iloop_start_sample, iloop_end_sample, itable)\\n\\n  asig *= linsegr(0, 0.01, 1, 2, 0)\\n\\n  ;; Pan the signal between left and right channel\\n  ;; pan2 uses range of 0 (hard left) to 1 (hard right)\\n  ;; must use the older style syntax as it has more than one output signals\\n  aleft, aright pan2 asig, limit:i(ipan, 0, 1)\\n   \\n;  out(aleft, aright)\\n  ga1 += aleft\\n  ga2 += aright\\n\\nendin\\n\\n;; Score generating instrument. \\n;; starts at a given MIDI note number (p4)\\n;; and plays for x number of notes (p5) \\n;; at a given decibel for amplitude (p6).\\n;; p3 is used by this instrument as part of its calculations for start times for generated notes.\\ninstr NoteRun\\n  inote_dur = p3\\n  istart_midi_note_num = p4 \\n  idur = random:i(0.8, 2)\\n  inum_notes = int(random:i(5, 10)) \\n  idecibels = -18 \\n\\n  indx = 0\\n  istart = 0\\n  while (indx < inum_notes) do\\n    indur = int(random:i(4, 16)) / 4 * idur\\n    schedule(\\\"SamplePlayer\\\", istart, indur * 0.99, istart_midi_note_num + int(random:i(0, 5)) * 2, idecibels)\\n    istart += indur\\n    indx +=1\\n  od\\n\\n  schedule(p1, istart + random:i(2, 5), 0, istart_midi_note_num)\\nendin\\n\\nschedule(\\\"NoteRun\\\", 0, 0, 60)\\nschedule(\\\"NoteRun\\\", 4, 0, 72)\\nschedule(\\\"NoteRun\\\", 7, 0, 36)\\n\\ninstr Mixer \\n  \\n  ;; REVERB SEND MIXING\\n  a1, a2 reverbsc ga1, ga2, 0.80, 10000\\n  \\n  a1 = ntrpol(a1, ga1, 0.8)\\n  a2 = ntrpol(a2, ga2, 0.8)  \\n  \\n  out(a1, a2)\\n  ga1 = 0\\n  ga2 = 0\\nendin \\n\\nschedule(\\\"Mixer\\\", 0, -1)\\n\\n</CsInstruments>\\n<CsScore>\\n;; Use GEN01 to load file\\n;; https://csound.com/docs/manual/GEN01.html\\n;; The below are \\\"f-statements\\\" for loading function tables. \\n;; p1 - the table number to assign to\\n;; p2 - start time of when to load the file\\n;; p3 - size of table, 0 denotes deferred table size, so have the GEN routine \\n;; calculate it for you \\n;; p4 - use GEN01\\n;; rest of arguments: specific to GEN01, see documentation above\\n\\n;; These samples are from the Freepats project\\n;; http://freepats.zenvoid.org/Synthesizer/synth-strings.html\\nf 1 0 0 1  \\\"SynthStrings1-30.wav\\\" 0 0 1\\nf 2 0 0 1  \\\"SynthStrings1-36.wav\\\" 0 0 1\\nf 3 0 0 1  \\\"SynthStrings1-42.wav\\\" 0 0 1\\nf 4 0 0 1  \\\"SynthStrings1-48.wav\\\" 0 0 1\\nf 5 0 0 1  \\\"SynthStrings1-54.wav\\\" 0 0 1\\nf 6 0 0 1  \\\"SynthStrings1-60.wav\\\" 0 0 1\\nf 7 0 0 1  \\\"SynthStrings1-66.wav\\\" 0 0 1\\nf 8 0 0 1  \\\"SynthStrings1-72.wav\\\" 0 0 1\\nf 9 0 0 1  \\\"SynthStrings1-78.wav\\\" 0 0 1\\nf 10 0 0 1 \\\"SynthStrings1-84.wav\\\" 0 0 1\\nf 11 0 0 1 \\\"SynthStrings1-90.wav\\\" 0 0 1\\nf 12 0 0 1 \\\"SynthStrings1-96.wav\\\" 0 0 1\\n\\nf0 36000\\n\\n</CsScore>\\n</CsoundSynthesizer>\\n\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}